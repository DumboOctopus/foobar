package level3;

import java.math.BigInteger;

/**
 * where i left off:
 *
 *  REDO THE MATH FOR RLS SHELL!!!!!!!!!! SERIOUSLY ITLL SAVE TIME>
 */

public class MinionBoredGame {

    /**
     *
     * Definitions:
     *      z=output of answer
     *      L=move left
     *      R=move right
     *      S=stay
     * Intersting things about the problem
     *  if n=2, z=t where t >= 1
     *  if t=n-1, z = 1
     *      since the only possible way to get to rightside is RR...
     *  if t=n, z= t!/( (n-1)!(t-n+1)! ) + 1
     *      there is still no opportunity to LR so the combinations are
     *      just permutation R and S. Plus the RR... combination.
     *      derived using combinations of indistiguishable items formula:
     *          n!/(n1! * n2! * ...)
     *   when adding:
     *      a+b (mod c) = [[a (mod c) ] + [b (mod c) ]] (mod c)
     *
     * CONCEPT:
     *  z= sum of possibilities of all occupied shells
     * Shells:
     *  RRRR shell,
     *      first appears: t=n-1
     *      1 possible state (RRRRR...)
     *  RRSS shell
     *      first appears: t=n
     *      {RRSS}.perm() states:
     *          t!/( (n-1)!(t-n+1 !)
     *
     * //---need more evidence to back up...double check work from here down--//
     *
     *  RLRL shell (no S) (special condition can't go L after on last peice)
     *      first appears: t=n+1 n>2 bc cant go backwards in 2 state sys
     *      Let L1 = {L*...}.perm(), L2 = {*...L}.perm(), L3 = {*...L*}.perm()
     *      {RR...LL...}.perm() - [n(L1)+n(L2)+n(L3)-n(L1 inter L2) - n(L1 inter L3)- n(L2 inter L3) + n(L1 inter L2 inter L3)
     *          we don't have to say -{*..R}.perm() because right on last move = move toward end
     *
     *          note: n(L1) = n(L2) = n(L3) = (t-1)!/(L-1)!/R!
     *          note: n(Ln inter Lk)= (t-2)!/(L-2)!/R! (see proof on line paper 1)
     *              when n!=k n,k element of [1,3]
     *          note: n(L1 inter L2 inter L3) = (t-3)!/(L-3)!/R!
     *
     *          in order for their to be no spaces num(R)-num(L) = n-1
     *          in order to be valid num(R)+num(L)=t
     *          also, it cant be like RRLLL where the number of L is more than the number of R.
     *          System equation yeilds: num(R) = (n-1)/2. num(L) = (1-n+t)/2
     *              Implies that not all systems with high enough values have a valid RLRL shell
     *
     *
     *
     *  RRLRLRSS Shell(special condition can't go L after on last peice):
     *      Most complex shell... D:
     *      We are no longer garenteeded last move = in last 2 places
     *      Note: S doesn't change location. Thus, to determine whether state is possible
     *      Substract the S and check if simplified state (a RRLL) is possible.
     *      Still complex however bc u can sub S...S for R...L
     *
     *      t!/R!/L!/S! - degenerate L cases * (t+1)(t+2)....(t+s)/s!
     *
     *      because each L cases can be interspaces with s creating (t+1)(t+2)....(t+s)/s!
     *      more possibilities for each case.
     *
     *
     *
     * RL case revisited:
     *
     * //l1: 3
     //L...   ...L   ...LR


     //1 new beginning, 1 new end
     //l2: 5
     //L...   ...L   ...LR   RLL... ...LLRR

        2 unions:
            0, 1: t-2, l-2, r
            0, 2: t-2, l-2, r
            0, 3: 0
            0, 4: t-5, l-3, r-2

            1,2: 0
            1,3: t-4, l-3, r-1
            1,4: 0

            2,3: t-5, l-3, r-2
            2,4: 0

            3,4: t-7, l-4, r-3

        //ALL TERITARY AND QUATERNY AND ETC UNIONS ARE 0!!!.
        3 unions:
            0,1,2: 0
            0,1,3: 0
            0,1,4: 0
            0,2,3: 0
            0,2,4: 0
            1,2,3: 0
            1,2,4: 0
            2,3,4: 0

     //2 new beginning, 2 new end
     //l3: 9
     //L...   ...L   ...LR   RLL... ...LLRR    RLRLL...    RRLLL...   ...LLLRRR   ...LLRLRR


     //5 new beginning, 5 new end
     //l4: 19
     //[l3]   RRRLLLL... RRLRLLL... RLRRLLL... RLRLRLL...  RRLLRLL... ...LLLLRRRR ...LRLLLRRR  ...LLRLLRRR  ...LLLRLRRR ...LLLRRLRR


     //p0 = 1
     0
 1    //p1 = 1
     1
 2    //p2 = 2
     3
 6    //p3 = 5
     9
 7    //p4 = 14
     28
     //p5 = 42
     // pc = c!/r!/l! - p0(c-1)!/(l-1)!/r! - p1(c-3)!/(l-2)!/(r-1)! - p2(c-5)!/(l-3)!/(r-2)! - p3(c-7)!/(l-4)!/(r-3)! - ...



     *RL notes again:
     *  # = t!/r!/l! - degens
     *  degens = L1 U L2 U L3 U L4 U L4 ....
     *         = n(L1) + n(L2) + .. -n(L1 inter L2) - n(L1 inter L3) - .. - n(Ln inter Lk)
     *
     *         note since there are unique only beginning chucnks and end chunks that are regexes for the the sets
     *         all teriatary interesection and quaternary and etc are 0. (Cant have 2 unique beginings at the beinning)
     *
     *  when the number of fixed lefts (f) and fixed rights( g) grows, it adds a certain number of new beginning possibilites and end possibilies.
     *  this number is p.
     *
     *      p[f] = c!/g!/f! - p0(c-1)!/(f-1)!/g! - p1(c-3)!/(f-2)!/(g-1)! - ...
     *
     *
     * since all degens with the same number of fixed lefts (f) have the same number of possibilities..
     *
     *      n(Lk) = p[l] * (t!/(l-f)!/(l-f+1)! + t!/(l-f)!/(l-f)!)
     *
     *      where k is such that all Lk have f fixed lefts.
     *
     *  degens = n(L1) + n(L2) + n(L3) + p2*n(La) + p3*n(Lb) + .. - unions
     *
     *
     */
    private static final BigInteger MODULUS = new BigInteger("123454321");

    public static int answer(int t, int n) {
        if(n==2) return t;

        BigInteger output = rrrrShell(t,n);
        if(t >= n)
            output =output.add(rrssShell(t, n));

        if(t >= n+1)
            output = output.add(rrllShell(t, n));

        if(t >= n+2)
            output =output.add( rrllssShell(t, n));

        return output.mod(MODULUS).intValue();
    }
    //==================SHELL CALCULATIONS=================//
    public static BigInteger rrrrShell(int t, int n)
    {
        if(t == n-1)
            return BigInteger.ONE;
        return BigInteger.ZERO;
    }

    public static BigInteger rrssShell(int t, int n)
    {
        //efficiency is not much of a concern here.
        return permWithRepeats(t, t-n+1, n-1, 0).mod(MODULUS);
    }

    public static BigInteger rrllShell(int t, int n)
    {
        //if its impossible
        if((t-n+1)%2 == 1) return new BigInteger("0");

        int l = (t-n+1)/2;
        int r = t-l;


        return rrllShellHelper(t, l, r);
    }


    public static BigInteger rrllShellHelper(int tInitial, int lIntial, int rIntial)
    {
        BigInteger out = permWithRepeats(tInitial, rIntial, lIntial);
        BigInteger degens = BigInteger.ZERO;

        //l = 1 cases
        degens = degens.add(permWithRepeats(tInitial-1,rIntial,lIntial-1,0).multiply(BigInteger.valueOf(2)));//L... ...L
        degens = degens.add(permWithRepeats(tInitial-2, rIntial-1, lIntial-1, 0)); //...LR

        //add up all degenerate sets
        for (int l = 2; l <= lIntial ; l++) {
            //beginning degen cases
            degens = degens.add(permWithRepeats(tInitial - (l-1+l),rIntial-l+1, lIntial- l).multiply(pValues[l]));
            //end degen cases
            degens = degens.add(permWithRepeats(tInitial-2*l,rIntial- l,lIntial- l).multiply(pValues[l]));
        }


        //subtract all unions between beginnings and ends
        //L...L
        //L...Rl
        //Beg...LR
        //beg...L
        //L...End
        //beg..end

        //subtract L... union ...L
        if(tInitial -2 >= 0 && lIntial-2>= 0)
            degens = degens.subtract(permWithRepeats(tInitial-2, rIntial, lIntial-2,0));
        if(tInitial-3 >=0 && lIntial-3 >= 0)
            degens = degens.subtract(permWithRepeats(tInitial-3, rIntial-1, lIntial-3,0));

        //RLLRRL
        //subtract all beginning case union ...L and ....LR

        for (int l = 2; l < lIntial; l++) {
            //...L

            degens = degens.subtract(permWithRepeats(tInitial-2*l, rIntial-l+1,lIntial- l-1).multiply(pValues[l]));
            //...LR
            degens = degens.subtract(permWithRepeats(tInitial-2*l-1 ,rIntial-l,lIntial-l-1).multiply(pValues[l]));
        }
        //lInit -l-1>=0
        //lInit -1 >= l

        //subtract end cases union L...
        //l=3
        //r=5
        //
        for (int l = 2; l < lIntial; l++) {
            degens = degens.subtract(permWithRepeats(tInitial-2*l-1,rIntial-l ,lIntial-l-1).multiply(pValues[l]));
        }

        //subtract general end cases union beginning cases
        for (int l1 = 2; l1 <= lIntial; l1++) { //l1 = fixed l1 in beginning case
            for (int l2 = 2; l2 <= lIntial; l2++) { //l2 = fixed l in end case
                int fixedL = l1 + l2;
                int fixedR = l1 -1+l2;

                if(tInitial-fixedL-fixedR>=0 && rIntial- fixedR>=0 &&  lIntial - fixedL>= 0)
                    degens = degens.subtract(
                            permWithRepeats(tInitial-fixedL-fixedR, rIntial- fixedR, lIntial - fixedL)
                                    .multiply(pValues[l1])
                                    .multiply(pValues[l2])
                    );
            }
        }

        System.out.println(out);
        System.out.println(degens);

        //the union of all of them is always garenteed to be 0 since u can't have 2 unique ends or 2 unique beginnings at the same time.

        out = out.subtract(degens);
        return out;
    }


    public static BigInteger rrllssShell(int t, int n)
    {

        int s = 1+(t+n)%2;
        int l = (t-n+1-s)/2; //check this!!!
        int r = t-l-s;

        BigInteger out = new BigInteger("0");

        //max is when all are RRRRR and the rest are S -1.
        while(r >= n-1 && l > 0 && s > 0){

            out = out.add( permWithRepeats(t,r,l,s).mod(MODULUS));


            BigInteger sPossibilities =  (permWithRepeats(s+l+r,l+r,s,0).mod(MODULUS));

            out = out.add(
                    rrllShellHelper(l+r, l, r).multiply(sPossibilities)
            );

            s+=2;
            l--;
            r--;
        }

        return out.mod(MODULUS);
    }




    //==================HELPER MATH METHOD=============//
    /**
     * Calculate t!/dMax!/d2!/d3!
     * It is not necessary to supply largest denom as second argument
     * but that is the most efficient.
     * @param t the numerator
     * @param dMax the largest denominator
     * @param d2 second denomenintor
     * @param d3 second denomenintor
     */
    public static BigInteger permWithRepeats(int t, int dMax, int d2, int d3)
    {

        if(t<0 || dMax < 0 || d2 < 0 || d3 < 0) throw new ArithmeticException("turned negative brub");
        BigInteger out = BigInteger.ONE;

        for(int i = dMax + 1; i <= t; i++)
            out =out.multiply(new BigInteger(i + "")) ;

        for(int i = d2; i > 1; i--)
            out = out.divide(new BigInteger(i + ""));

        for(int i = d3; i > 1; i--)
            out = out.divide(new BigInteger(i + ""));

        return out;
    }

    /**
     * Calculate t!/dMax!/d2!/d3!
     * It is not necessary to supply largest denom as second argument
     * but that is the most efficient.
     * @param t the numerator
     * @param dMax the largest denominator
     * @param d2 second denomenintor
     */
    public static BigInteger permWithRepeats(int t, int dMax, int d2)
    {
        if(t<0 || dMax < 0 || d2 < 0) throw new ArithmeticException("turned negative brub");
        BigInteger out = BigInteger.ONE;

        for(int i = dMax + 1; i <= t; i++)
            out =out.multiply(new BigInteger(i + "")) ;

        for(int i = d2; i > 1; i--)
            out = out.divide(new BigInteger(i + ""));


        return out;
    }



    //the number of new dege cases for p[l] layer where l is the number of fixed left
    private static BigInteger[] pValues = {
            new BigInteger("1"),
            new BigInteger("1"),
            new BigInteger("1"),
            new BigInteger("2"),
            new BigInteger("5"),
            new BigInteger("14"),
            new BigInteger("42"),
            new BigInteger("132"),
            new BigInteger("429"),
            new BigInteger("1430"),
            new BigInteger("4862"),
            new BigInteger("16796"),
            new BigInteger("58786"),
            new BigInteger("208012"),
            new BigInteger("742900"),
            new BigInteger("2674440"),
            new BigInteger("9694845"),
            new BigInteger("35357670"),
            new BigInteger("129644790"),
            new BigInteger("477638700"),
            new BigInteger("1767263190"),
            new BigInteger("6564120420"),
            new BigInteger("24466267020"),
            new BigInteger("91482563640"),
            new BigInteger("343059613650"),
            new BigInteger("1289904147324"),
            new BigInteger("4861946401452"),
            new BigInteger("18367353072152"),
            new BigInteger("69533550916004"),
            new BigInteger("263747951750360"),
            new BigInteger("1002242216651368"),
            new BigInteger("3814986502092304"),
            new BigInteger("14544636039226909"),
            new BigInteger("55534064877048198"),
            new BigInteger("212336130412243110"),
            new BigInteger("812944042149730764"),
            new BigInteger("3116285494907301262"),
            new BigInteger("11959798385860453492"),
            new BigInteger("45950804324621742364"),
            new BigInteger("176733862787006701400"),
            new BigInteger("680425371729975800390"),
            new BigInteger("2622127042276492108820"),
            new BigInteger("10113918591637898134020"),
            new BigInteger("39044429911904443959240"),
            new BigInteger("150853479205085351660700"),
            new BigInteger("583300119592996693088040"),
            new BigInteger("2257117854077248073253720"),
            new BigInteger("8740328711533173390046320"),
            new BigInteger("33868773757191046886429490"),
            new BigInteger("131327898242169365477991900"),
            new BigInteger("509552245179617138054608572"),
            new BigInteger("1978261657756160653623774456"),
            new BigInteger("7684785670514316385230816156"),
            new BigInteger("29869166945772625950142417512"),
            new BigInteger("116157871455782434250553845880"),
            new BigInteger("451959718027953471447609509424"),
            new BigInteger("1759414616608818870992479875972"),
            new BigInteger("6852456927844873497549658464312"),
            new BigInteger("26700952856774851904245220912664"),
            new BigInteger("104088460289122304033498318812080"),
            new BigInteger("405944995127576985730643443367112"),
            new BigInteger("1583850964596120042686772779038896"),
            new BigInteger("6182127958584855650487080847216336"),
            new BigInteger("24139737743045626825711458546273312"),
            new BigInteger("94295850558771979787935384946380125"),
            new BigInteger("368479169875816659479009042713546950"),
            new BigInteger("1440418573150919668872489894243865350"),
            new BigInteger("5632681584560312734993915705849145100"),
            new BigInteger("22033725021956517463358552614056949950"),
            new BigInteger("86218923998960285726185640663701108500"),
            new BigInteger("337485502510215975556783793455058624700"),
            new BigInteger("1321422108420282270489942177190229544600"),
            new BigInteger("5175569924646105559418940193995065716350"),
            new BigInteger("20276890389709399862928998568254641025700"),
            new BigInteger("79463489365077377841208237632349268884500"),
            new BigInteger("311496878311103321137536291518809134027240"),
            new BigInteger("1221395654430378811828760722007962130791020"),
            new BigInteger("4790408930363303911328386208394864461024520"),
            new BigInteger("18793142726809884575211361279087545193250040"),
            new BigInteger("73745243611532458459690151854647329239335600"),
            new BigInteger("289450081175264899454283846029490767264392230"),
            new BigInteger("1136359577947336271931632877004667456667613940"),
            new BigInteger("4462290049988320482463241297506133183499654740"),
            new BigInteger("17526585015616776834735140517915655636396234280"),
            new BigInteger("68854441132780194707888052034668647142985206100"),
            new BigInteger("270557451039395118028642463289168566420671280440"),
            new BigInteger("1063353702922273835973036658043476458723103404520"),
            new BigInteger("4180080073556524734514695828170907458428751314320"),
            new BigInteger("16435314834665426797069144960762886143367590394940"),
            new BigInteger("64633260585762914370496637486146181462681535261000"),
            new BigInteger("254224158304000796523953440778841647086547372026600"),
            new BigInteger("1000134600800354781929399250536541864362461089950800"),
            new BigInteger("3935312233584004685417853572763349509774031680023800"),
            new BigInteger("15487357822491889407128326963778343232013931127835600"),
            new BigInteger("60960876535340415751462563580829648891969728907438000"),
            new BigInteger("239993345518077005168915776623476723006280827488229600"),
            new BigInteger("944973797977428207852605870454939596837230758234904050"),
            new BigInteger("3721443204405954385563870541379246659709506697378694300"),
            new BigInteger("14657929356129575437016877846657032761712954950899755100"),
            new BigInteger("57743358069601357782187700608042856334020731624756611000"),
            new BigInteger("227508830794229349661819540395688853956041682601541047340"),
            new BigInteger("896519947090131496687170070074100632420837521538745909320"),
            new BigInteger("3533343320884635898708258511468514257188006702535057407320"),
            new BigInteger("13927547459020991989083038404429289207944958458536245702640"),
            new BigInteger("54906677482678910726192747555923159377475316999998660943100"),
            new BigInteger("216489185503133990863274261791925599831188392742851863147080"),
            new BigInteger("853702637172735926234421145556838686126761775155774328259240"),
            new BigInteger("3366939372774715522158184331074634818182181954352680060985040"),
            new BigInteger("13280705303722489004068393750349948449496384375502238018329880"),
            new BigInteger("52391773216519910749994580850004383791591241114366627044787600"),
            new BigInteger("206709359781542193322705891717290023323187260396682873976707440"),
            new BigInteger("815663960219058384462569194343901173113117297781505394610791520"),
            new BigInteger("3218959557293069695825496284821467129607123621602012360874730820"),
            new BigInteger("12704920022590345879098861442746675573493602966676969141151592440"),
            new BigInteger("50151000089172417943811295168736877263790538026356457136124707000"),
            new BigInteger("197987426438993719534698504405274280676181776208398535128701017200"),
            new BigInteger("781708976802233823680102715669100177152510806064194216284009188600"),
            new BigInteger("3086748267372923303762456877257472494397093952150920751480446539600"),
            new BigInteger("12190039767760866606383939871203238833805472726290924323643119385200"),
            new BigInteger("48145535217206784075634048230802707999063631776107012034556858076000"),
            new BigInteger("190174864107966797098754490511670696596301345515622697536499589400200"),
            new BigInteger("751269297881058917464501210451062751843240026086509499359064493663600"),
            new BigInteger("2968129521136642608343357241290264314659358135849980153205484311031600"),
            new BigInteger("11727731278637465915893265197293239487190634585553580117543620936271200"),
            new BigInteger("46343454246228695957965322150594252812285572152590760141906244022362000"),
            new BigInteger("183149331181095806425878953139148487114152581147038684080813476376374624"),
            new BigInteger("723875928001473901587997767169015449070222106438295751367024692344718752"),
            new BigInteger("2861304849265668492891140780463352404986232263244287143198790516197234752"),
            new BigInteger("11311095732253345760960290897769189975961199415637572612957718759342193629"),
            new BigInteger("44718285453094622775889522153971216184032648852520635911693306722980765510"),
            new BigInteger("176809220945312585436978572208778500912252165463043129681618151197016257478"),
            new BigInteger("699138751524213124094312216825551629561424593205010237977696200916445964684"),
            new BigInteger("2764775971936660990736598311991954171447451800401631395639071339987763587614"),
            new BigInteger("10934377152170553993439479038404269881062854488806451985760537780703486068308"),
            new BigInteger("43247909631719355347185999181748231619129200590055369794426007640095877732860"),
            new BigInteger("171069509209912116706646841207804116182333282333996796075729541331934805254424"),
            new BigInteger("676730852609799402854235298307342753721289013938899090358400685563095038432942"),
            new BigInteger("2677285562879644352897777603522480091364515660984549685943453807118230006063172"),
            new BigInteger("10592738531393375483204250518284595144094388049982348757428447671641692632684724"),
            new BigInteger("41913713613427025293254228669471419634905851996333034651695296542467129122133800"),
            new BigInteger("165858552441704085803306019163479760555270300042632151407422816318048496669015180"),
            new BigInteger("656376399024616169349253607753345435388942038466586811952779656067170646392272840"),
            new BigInteger("2597771382055171036438595264488592497806939617029730903644099765561619037129981240"),
            new BigInteger("10282088127575012633735978459444359117193900861809983856381541729425708916192792880"),
            new BigInteger("40699932171651091675204914735300588172225857577997852764843602678976764459929805150"),
            new BigInteger("161115593562260183597018076262500259385225118963936327496691227156776984827584194180"),
            new BigInteger("637841185472509493966277041641953081675754238090104091048544721209706145413312768740"),
            new BigInteger("2525330407789119221009341756704875466226455554887350891090156651320061065513932186440"),
            new BigInteger("9998943371381242321023474793439574481139884832189105555262377011307809353994353116580"),
            new BigInteger("39593131470570019928884900188787576804513637926117934749025519709205419589642069387800"),
            new BigInteger("156788800623457278918384204747598804145874006187427021606141058048453461574982594775688"),
            new BigInteger("620925183926009621146978506218967449531342090729015621989883130549504437230725772687824"),
            new BigInteger("2459190531075380210068954346998805293538604859334653976565195030202642573769058652355724"),
            new BigInteger("9740323279945623577135858393995268025388199638933335358160184237273211762771565642663848"),
            new BigInteger("38581800004979418065278400132059178542122089478891782912192937563225059579809448324837320"),
            new BigInteger("152833710987466856077941533426350552418470728645416481987654604282710881174212911428710416"),
            new BigInteger("605456624296503314462614536265927188427018655787611447874170163119970029267074226044506648"),
            new BigInteger("2398688027467675551565262685079023638226787285986588029157540391468925848433886424201803408"),
            new BigInteger("9503662691106106932150977473794106313480815449541798140839368892781946715946917098419803376"),
            new BigInteger("37656021983627970863239722065976647657188136686863728482571084292154883214129294163550164320"),
            new BigInteger("149211987110125834545587398686432466341607991621697524112187921507663724735987328123067526118"),
            new BigInteger("591287253268697406460153791067974618173577010277285840891775738645276126593539846847932184244"),
            new BigInteger("2343249485175948981156905764602714227576768151839614258348889038334983168352176430101064582004"),
            new BigInteger("9286743358427380624707736956646339822175412429990127674192529562971773783776110268989495214568"),
            new BigInteger("36807214530352423207683103791586102953744012679838920659909415950802761947893119968555926155300"),
            new BigInteger("145890413956669604714089393210286735343930813894634267342913685041363674629830911875367125488280"),
            new BigInteger("578288508334268674107655546580534167809075153871502095853236173236248782568847831409587762477640"),
            new BigInteger("2292377200702310552450706418181518677183279951275056212304445189714950263835792002354174244073040"),
            new BigInteger("9087638188498445404358157586362449041690859806840401413064050573512838545920461152189762181860980"),
            new BigInteger("36027914711798570537987962028774206259957846571497449389070496356530188318146206934716808649981400"),
            new BigInteger("142840085386777862015316978867022441289479932877584005224903026731184393684885549847053700176985080"),
            new BigInteger("566348408726522751148449775858720556691622190005859389137334807741187245136563759042704144561379440"),
            new BigInteger("2245637295066793699321178762416554765486548451069744787160827551624940123157770253878629224365469640"),
            new BigInteger("8904665805871794668984558560796280746380186343548236554868946245171727887203643896882888138235330480"),
            new BigInteger("35311605781905392652869801189364561580473152741656800131376855799818920932014449935914901237829758800"),
            new BigInteger("140035739500813385720523668716680032781990674301198967378145931000424749296103018602999665480307729184"),
            new BigInteger("555369012338453086550713186160469675464940287853618631988328749081229971640226744232350946052584062332"),
            new BigInteger("2202649981138949529709608229856778034894847921317741692970659784491657853623950138141866464005163908232"),
            new BigInteger("8736353295978080718960580956622951082223385575563627164254414650848935082351173019821110806672166961864"),
            new BigInteger("34652574525946577153419064129621761275858121556704889869389019006160580494242082927782059624230382921360"),
            new BigInteger("137455212286254756041895621047499653060903882174929396481909775391103635960493595613535503176113852254728"),
            new BigInteger("545264322770889032254591469127650557446016504981211639082934910114985694031129290886842493262153292369584"),
            new BigInteger("2163081544179021325757225498407492870747384157123268150647686841225382808189424989122529011732278445554064"),
            new BigInteger("8581405470349560013659812633026447126571589606948047417323610091418731796423620448650033128511662029903008"),
            new BigInteger("34045793442147710923759039250594056534767719636261275079599105253998229409724146345187631433769093922984760"),
            new BigInteger("135078985873169836854265593567221824305510844394679869775274287872620002090473099553339034985873053726869264"),
            new BigInteger("535958556851609352679828000282847883534768834211149160721249593817169685713812620808409719460076955109836112"),
            new BigInteger("2126637696170556896729584899518038126111221791361885974626562559424277576468711040854759421600947062521381792"),
            new BigInteger("8438679368846997047661012420427959798292401363595568814209657815587824851306693811051332598480353769366759664"),
            new BigInteger("33486822892249988284369096906460157929731751442839558786546261172967558933756721472425923009842673687963332000"),
            new BigInteger("132889812951349953507443679302478731994830213620531722763452004865355470716066147316890241839059873477496591200"),
            new BigInteger("527384702707451647951006852938632873571106292797712281961762406743138464936011202440852373371766408879279665600"),
            new BigInteger("2093058038870198727805558447600199216985328099540920619035744551761830782714794459687132856819197935239641172850"),
            new BigInteger("8307162993650633292741231973376956477775965410613187534618550915282706629842137596478465120847179369914845276700"),
            new BigInteger("32971729407788596058818291853094105607667491578206981451836516519421052087517762625198031665218186158940365273500"),
            new BigInteger("130872402880145504356540296893819680719664812725806172531904942492471252901224350112324494917327569677024834470200"),
            new BigInteger("519483313473230624435654851956080161223975634187128582805214516628278748760982369323410495131024740860843475601100"),
            new BigInteger("2062111427086631209688741595074389269427152009818957115500902294433065896096894481273639630418585519559287299086600"),
            new BigInteger("8185957483283293589976519665295302857422936766251011579715703047597928254202823546874145199540445547341413217586200"),
            new BigInteger("32497017144692472040610304198911001293287035403710045969725655314584740305629299507691330189130411971857871567302000"),
            new BigInteger("129013158064429114001222907669676675134349530552728882499810851598901419013348319045534580850847735528275750122188940"),
            new BigInteger("512201493211017079467541693136328292324432464582475861864920694407578768023144072628540276213813397768975366156750120"),
            new BigInteger("2033592067105127216499843751957105398238588299975968520869635628291476098784958149743016344175635371340189325038186120"),
            new BigInteger("8074262098949421362063419034864172172316759457047441516359242937945466677934365855629907258155478370936909339806788240"),
            new BigInteger("32059570098769761290545928520784213037140074314747194256132288135959941221209982073824631760323222943425963555115188600"),
            new BigInteger("127299951514139442392704321053260241035278148742459590851178939232543376361292319063869513428795626711945045531042748880"),
            new BigInteger("505492040478476038238990944764887753237172454715203618040118312098157678949209305797307097013372925487238093419383342640"),
            new BigInteger("2007316218711629485180920563269264411405583370898054946999890108911524696117149996934233979444408428746423733288565737440"),
            new BigInteger("7971361522383682474805001852213521172216403194047083587605332836350574033619066814748448399139814241079548094694015861180"),
            new BigInteger("31656603175016538057838045633192452502103419383057796065609694996033380133511126584886182637732276651177152720555182606600"),
            new BigInteger("125721938323637108286842524086107168508353579835572390089135645841389709673087045579976553904136755843246406518776296637640"),
            new BigInteger("499312721873023207319308223621600982037916113280614516088605076848742069696904948796304986595576309936684780392106808447120"),
            new BigInteger("1983119395363611040390837378723528428660025317840931238427384314653966144739594183426833956195637985691927288161103456190920"),
            new BigInteger("7876615063275187512538255504225845308198973797621726890655244742710119053754444503188270079537604393874978806499030628814640"),
            new BigInteger("31285620578429483110549145694354993046584709009245176902135317903287856054632139381822568072929737078475383109926056235946000"),
            new BigInteger("124269395227808272448413815920833321217596937180908749183365402276315484049562079218960340159451141697758033376171404769757600"),
            new BigInteger("493625653266016193336754879907754581503232278246387531478368125708697617196871592453092462300042035077205521466458635613203800"),
            new BigInteger("1960853977489889210397616158896241701639567851835880424582273384151600672920291763569427200472978037956456956240033842850606800"),
            new BigInteger("7789447451863504844974016484422684924861769539861800218753434636125165975912718657115247502796325600322439101393895907837731600"),
            new BigInteger("30944380288224882260855681924418885317944015980272904978609534855839700452256005624156462682341567453335716978140134428396468000"),
            new BigInteger("122933583508675214072672118190645935308559408939811449778657879381835900887598858706876129019847863428251893813156715865538695600"),
            new BigInteger("488396770681524153646181537427091091406855932349115171518830851118786972757066959025507879092427258325815216144577359863995360800"),
            new BigInteger("1940387170004974340161856378426551092886697893387025140899138786877342837710509269641882654772616404699860453331158700000197784800"),
            new BigInteger("7709340953472678320104954041640916001334593423950243384917654552346752261038166874003175031966538720018279648661016180269844113600"),
            new BigInteger("30630863609779837968274147754733996612445482800516592020431752462449149608589145169030472225224194021501200389769216073393577058500"),
            new BigInteger("121706631409525222860609280412143079873450051660719258961182163117464621111460870138281076308224130912098102882016351864950479512440"),
            new BigInteger("483595376131653319154102361991612768700699762793477409500626471148155883885362218514054896127368449376389807026772937941263409744120"),
            new BigInteger("1921599247888772219722468416371959107348155004580249442156674347910293424073113308809152054215358331883275797084357665299645795547120"),
            new BigInteger("7635828590294858031002440286109626979199247518200464888569942803538271237764213411320577899645239687220385404203631775269645134937240"),
            new BigInteger("30343248983267776455075199390217294982844171360534598465496279262968676097665651547169108684179773429565723658625785657185052719619600"),
            new BigInteger("120581432916116294260603183663733076583998141841428795641146083679797260666375676148315501466697012672274223582538991698552774720575280"),
            new BigInteger("479193746393916701866812651962367810840304303941262486573905215662570931998843596121877187646873842567739122289051057918924013824623840"),
            new BigInteger("1904382043858582754832764073746996213770519690663120744056640555348665514236783601829184340562145184687308063579763256039861813561651640"),
            new BigInteger("7568488294476599274571414301672611562023610444437982012860296799368516163876659293106543774079598459315224321351333798682025919991800080"),
            new BigInteger("30079889375483920193809467096391148515734862022766338769060153946208205266689286934141391922624045158816917174601454840915744040993051600"),
            new BigInteger("119551560326391410472417201140550351973176004805377703873626313981950909442926782963778978960556843312063832515224505623043850784202171040"),
            new BigInteger("475166794856589589081048028262017924367962256387475789124836790318093021429937806864511365529670843333541842793561806247521745913481510320"),
            new BigInteger("1888637640316064949005684568028780104449875297540093642850617115947863401632917358929829984510337276034584033382005153945845926795356889120"),
            new BigInteger("7506937847642846393946964711576579742897403493583733555196150385238146125818234544317727585490668332473598720921751578288950616589947971040"),
            new BigInteger("29839292699835581900626010359823224919466666606295175219398924125423593387143610113396825130611443162551961442994410039223862283516529592000"),
            new BigInteger("118611188481846438054988391180297319054879999760023321497110723398558783713895850200752379894180486571144046735902779905914852576978205128200"),
            new BigInteger("471491778280534803554684144193878969521058256307478597486440136995100891277644085030376680243256871930107870427364577385337878708485977231600"),
            new BigInteger("1874277234321795376114074986423601523468008440362786821413038891691268832268981858674472588405012854532081699798036047292128261642824421887600"),
            new BigInteger("7450830487057013717391754884301230747613564417244658722160475594130723012229779734483705845264372088386793917715649471951423459864067454911200"),
            new BigInteger("29620104805103702073237714089230302562234251986587372788916644779945907056815107960857355204534593957931106967967950769642953918312071439606000"),
            new BigInteger("117755028898657166609524626624123733451494536469126943250631885778233932544236388383163526404966100061326115048166465508703008638514112580311200"),
            new BigInteger("468148041719051662374451564383711428112039254743114432923243838581759292797817836742820848878279861219418457386613021412648546538482935380261600"),
            new BigInteger("1861220149668456406687090834918237337676204648411896247492410726669180670151648241625303941694213861204327632201028287559598674901984787625169600"),
            new BigInteger("7399851078923782326586578883989443608664265255379555242046439421354081212780343412268345510122963173981721957057314078765178602634504034671037200"),
            new BigInteger("29421094651142749009320132912247185432038644991268111203317168783696949400211003928295831546272022257999617419625465614367577576739594354716172000"),
            new BigInteger("116978272332943570061056848459094809277785652485282010144389063083979070815238951618904226227977560497806478860430851282725488445116627154351499872")
    };


     /*
    static ArrayList<BigInteger> pvalues;

    public static void main(String[] args) {

        pvalues = new ArrayList<>(Arrays.asList(new BigInteger[]{
                BigInteger.ONE, BigInteger.ONE, BigInteger.ONE, BigInteger.valueOf(2), BigInteger.valueOf(5)
        }));
        int l = 0;
        while(l <= 250)
        {
            System.out.println("new BigInteger(\""+pc(l) + "\"),");
            l++;
        }

    }

    public static BigInteger pc(int originalL) {
        if(originalL <= 2) return BigInteger.ONE;
        int l = originalL; //number of non fixed l
        int r = l; //number of non fixed r
        int c = r + l; //number of mutatable things

        BigInteger out = permWithRepeats(c, r, l, 0);
        c--;
        l--;
        out =out.subtract( permWithRepeats(c, r, l, 0));
        c--;
        r--;
        out =out.subtract( permWithRepeats(c, r, l, 0));

        l--;r--;c -= 2;

        while (l >= 0 && c > 0 && r >= 0){
            int fixedLs = originalL - l;
            out = out.subtract(pvalues.get(fixedLs).multiply( permWithRepeats(c, r, l, 0)));
            l--;r--;c -= 2;
        }
        if(pvalues.size() <= originalL)
            pvalues.add(originalL, out);
        return out;
    }
     */
}
